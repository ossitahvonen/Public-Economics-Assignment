V <- E$values
Q <- E$vectors
Y <- Q%*%diag(1/sqrt(V))%*%t(Q)
inv
}
cov2(test)%*%inversq(var(test[1,]))%*%inversq(var(test[2,]))
######################################################################################################
#3.B
######################################################################################################
inversq <- function(A) {
#inverse
inv <- solve(A)
#solve square with eigenvalues
sq <- apply(inv, 2, sqrt)
E <- eigen(A)
V <- E$values
Q <- E$vectors
Y <- Q%*%diag(1/sqrt(V))%*%t(Q)
inv
}
cov2(test)%*%inversq(var(test[1,]))%*%inversq(var(test[2,]))
cov2(test)%*%inversq(var(test[1,]))%*%t(inversq(var(test[2,])))
dim(var(test))
dim(inversq(var(test[1,])))
cov2(test)%*%(inversq(var(test))%*%inversq(var(test[2,])))
cov2(test)%*%inversq(var(test))%*%inversq(var(test[2,]))
######################################################################################################
#3.B
######################################################################################################
inversq <- function(A) {
#inverse
inv <- solve(A)
#solve square with eigenvalues
sq <- apply(inv, 2, sqrt)
E <- eigen(A)
V <- E$values
Q <- E$vectors
Y <- Q%*%diag(1/sqrt(V))%*%t(Q)
sq
}
cov2(test)%*%inversq(var(test))%*%inversq(var(test[2,]))
test%*%inversq((test))%*%inversq((test[2,]))
test%*%inversq((test))
ossi <- c(10,10,7,3,8,5,6,3,9,2)
ossi <- c(10,10,7,3,8,5,6,3,9,2)
sampo <- c(5,6,9,4,3,8,7,10,9,6)
mean(ossi)
mean(sampo)
var(ossi)
sd(ossi)
sd(sampo)
ossi <- c(10,10,7,3,8,5,6,3,9,2)
sampo <- c(5,6,9,4,3,8,7,10,9,6)
mean(ossi)
mean(sampo)
sd(sampo)
sd(ossi)
?binom
?distribution
dbinom(6,12,prob = 0.5)
dbinom(1,12,prob = 0.5)
(1/2)^12
(1/2)^12*12
dbinom(1,12,prob = 0.5)
dbinom(6,12,prob = 0.5)
4096*dbinom(6,12,prob = 0.5)
pbinom(5, 8, prob = 0.5)
1-pbinom(5, 8, prob = 0.5)
1-pbinom(4, 8, prob = 0.5)
5*5+10*5+10*5+5*4+5*4+5*5+5*3+5*5+5*5+5*4+4*4+5*10+5*10+6*5+5*4+5*5+5*5+5*5+5*4+5*4+5*5+5*4+5*5+10*5+5*4+5*3+5*3=
5*5+10*5+10*5+5*4+5*4+5*5+5*3+5*5+5*5+5*4+4*4+5*10+5*10+6*5+5*4+5*5+5*5+5*5+5*4+5*4+5*5+5*4+5*5+10*5+5*4+5*3+5*3
5*5+10*5+10*5+5*4+5*4+5*5+5*3+5*5+5*5+5*4+4*4+5*10+5*10+6*5+5*4+5*5+5*5+5*5+5*4+5*4+5*5+5*4+5*5+10*5+5*4+5*3+5*3
25+25+65+5+5+5+5+5+5+5+5+5
726/160
726/183
ossi <- c(10,10,7,3,8,5,6,3,9,2)
sampo <- c(5,6,9,4,3,8,7,10,9,6)
sd(sampo)
sd(ossi)
?sd
sdev <- function(x) {
sqrt(sum((x-mean(x))^2)/length(x))
}
sdev(sampo)
sdev(ossi)
c <- matrix(c1,c2,nrow=2)
c0 <- 1328.2
c0 <- 1328.2
c0 <- 1328.2
c0 <- 1328.2
c1 <- 1114.1
c2 <- 591.73
c3 <- 96.216
c <- matrix(c1,c2,nrow=2)
c
c <- matrix(c1,c2,nrow=2, ncol=1)
c
c2 <- 591.73
c <- matrix(c1,c2,nrow=2, ncol=1)
c
c <- matrix(c1,c2,nrow=2, ncol=1, byrow = T)
c
c <- matrix(c1,c2,nrow=2, ncol=1, byrow = F)
c
c <- cbind(c1,c2)
c
c <- t(cbind(c1,c2))
c
c <- rbind(c1,c2)
c
bC <- rbind(c0,c1)
bC
bC <- cbind(bC,c(c1,c0))
bC
invbC <- solve(bC)
invbC
invbC%*%invbC
invbC%*%bC
invbC <- solve(bC)
invbC%*%c
invBc
invbC
c
bC
a <- matrix(c(0.0025400823639205186387	-0.0021306322554162398851
2,	-0.0021306322554162398851,	0.0025400823639205186388),byrow=T, ncol=2)
a <- matrix(c(0.0025400823639205186387	-0.00213063225541623988512,	-0.0021306322554162398851,	0.0025400823639205186388),byrow=T, ncol=2)
a <- matrix(c(0.0025400823639205186387 -0.00213063225541623988512, -0.0021306322554162398851, 0.0025400823639205186388),byrow=T, ncol=2)
a <- matrix(c(0.0025400823639205186387, -0.00213063225541623988512, -0.0021306322554162398851, 0.0025400823639205186388),byrow=T, ncol=2)
a <- matrix(c(0.0025400823639205186387, -0.00213063225541623988512, -0.0021306322554162398851, 0.0025400823639205186388),byrow=T, ncol=2)
a%*%c
g <- t(c(1.3175,-0.6342))
ga <- matrix(c(0.0025400823639205186387, -0.00213063225541623988512, -0.0021306322554162398851, 0.0025400823639205186388),byrow=T, ncol=2)
g
g <- c(1.3175,-0.6342))
g
g <- matric(c(1.3175,-0.6342), ncol=1)
g <- matrix(c(1.3175,-0.6342), ncol=1)
g
a%*%c-g
phi <- a%*%c
c0-phi[1]*c1-phi[2]*c2
#confidence
phihat + 1.96*sqrt(((sigmahat%*%invbC)/2)[1,1])
#YW estimate
phihat <- invbC%*%c
#variance
sigmahat <- c0-phi[1]*c1-phi[2]*c2
#confidence
phihat + 1.96*sqrt(((sigmahat%*%invbC)/2)[1,1])
#confidence
phihat + 1.96*sqrt(((sigmahat*invbC)/2)[1,1])
#confidence interval for phi_1
phihat + 1.96*sqrt((((sigmahat*invbC)[1,1])/2))
#inverse
invbC <- ginv(bC)
library(MASS)
#inverse
invbC <- ginv(bC)
#YW estimate
phihat <- invbC%*%c
#variance
sigmahat <- c0-phi[1]*c1-phi[2]*c2
#confidence interval for phi_1
phihat + 1.96*sqrt((((sigmahat*invbC))/2))
phihat
c1 <- 1114.4
c <- rbind(c1,c2)
#"big C"
bC <- rbind(c0,c1)
bC <- cbind(bC,c(c1,c0))
#inverse
invbC <- ginv(bC)
#inverse
invbC <- ginv(bC)
#inverse
invbC <- ginv(bC)
library(MASS)
#create matrixes
c0 <- 1328.2
c1 <- 1114.4
c2 <- 591.73
c3 <- 96.216
c <- rbind(c1,c2)
#"big C"
bC <- rbind(c0,c1)
bC <- cbind(bC,c(c1,c0))
#inverse
invbC <- ginv(bC)
#YW estimate
phihat <- invbC%*%c
phihat
c <- matrix(c(c1,c2),nrow=2, ncol = 1)
c
#"big C"
bC <- matrix(c(c0,c1,c1,c0), nrow = 2, ncol = 2, byrow = T)
#inverse
invbC <- ginv(bC)
#YW estimate
phihat <- invbC%*%c
phihat
#confidence interval for phi_1
conf1 <- c(phihat[1,1] + 1.96*SIG[1,1], phihat[1,1] - 1.96*SIG[1,1])
vphi <- (sigmahat*invbC)/Ti
SIG <- sqrt(vphi)
#variance
sigmahat <- c0-phi[1]*c1-phi[2]*c2
#YW estimate
phihat <- invbC%*%c
phihat
#variance
sigmahat <- c0-phihat[1]*c1-phihat[2]*c2
vphi <- (sigmahat*invbC)/Ti
Ti <- 100
#variance
sigmahat <- c0-phihat[1]*c1-phihat[2]*c2
vphi <- (sigmahat*invbC)/Ti
SIG <- sqrt(vphi)
#confidence interval for phi_1
conf1 <- c(phihat[1,1] + 1.96*SIG[1,1], phihat[1,1] - 1.96*SIG[1,1])
#for phi_2
phihat + 1.96*sqrt(((sigmahat*invbC)/2)[1,1])
#for phi_2
conf1
phihat
#confidence interval for phi_1
conf1 <- c(phihat[1,1] + 1.96*SIG[1,1], phihat[1,1] - 1.96*SIG[1,1])
#for phi_2
conf1
#confidence interval for phi_1
conf1 <- c(phihat[2,2] + 1.96*SIG[2,2], phihat[2,2] - 1.96*SIG[2,2])
#confidence interval for phi_1
conf1 <- c(phihat[2,1] + 1.96*SIG[2,1], phihat[2,1] - 1.96*SIG[2,1])
#for phi_2
conf1
#confidence interval for phi_1
conf1 <- c(phihat[2,1] + 1.96*SIG[2,2], phihat[2,1] - 1.96*SIG[2,2])
#for phi_2
conf1
#create matrixes
c0 <- 1382.2
c <- matrix(c(c1,c2),nrow=2, ncol = 1)
#"big C"
bC <- matrix(c(c0,c1,c1,c0), nrow = 2, ncol = 2, byrow = T)
#inverse
invbC <- ginv(bC)
#YW estimate
phihat <- invbC%*%c
phihat
#create matrixes
c0 <- 1382.2
c1 <- 1114.4
c2 <- 591.73
c3 <- 96.216
c <- matrix(c(c1,c2),nrow=2, ncol = 1)
#"big C"
bC <- matrix(c(c0,c1,c1,c0), nrow = 2, ncol = 2, byrow = T)
#inverse
invbC <- ginv(bC)
library(MASS)
#"big C"
bC <- matrix(c(c0,c1,c1,c0), nrow = 2, ncol = 2, byrow = T)
#inverse
invbC <- ginv(bC)
#YW estimate
phihat <- invbC%*%c
phihat
#confidence interval for phi_1
conf1 <- c(phihat[1,1] + 1.96*SIG[1,1], phihat[1,1] - 1.96*SIG[1,1])
#for phi_2
conf2 <- c(phihat[2,1] + 1.96*SIG[2,2], phihat[2,1] - 1.96*SIG[2,2])
conf1
conf2
mydata <- read.dta("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta"))
mydata <- read.dta("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta")
library(foreign)
mydata <- read.dta("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta")
mydata <- read.systat("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta")
library(tidyverse)
mydata <- read.dta("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta")
install.packages("readstata13")
library(readstata13)
mydata <- read.dta("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta")
mydata <- read.dta13("/Users/ossitahvonen/Desktop/rMSC/labor/database_turkey.dta")
class(mydata)
head(mydata)
y_af12 <- mydata[mydata$year>=2012]
y_af12 <- mydata[mydata$year>=2012,]
y_af12
View(mydata)
library(dplyr)
tr_group <- filter(mydata, region %in% tr_target)
tr_target <- c("TR62", "TR63", "TRC1", "TRC2", "TRC3")
tr_group <- filter(mydata, region %in% tr_target)
#1.1.
#making the plot
ggplot(mydata) + aes(x=date, y=tr_group$employment_rate)
#1.1.
#making the plot
ggplot(mydata) + geom_line(aes(x=date, y=tr_group$employment_rate))
#1.1.
#making the plot
ggplot(mydata) + geom_line(aes(x=year, y=tr_group$employment_rate))
min(mydata$year)
#1.1.
yrs <- c(2004:2015, by = 1)
yrs
#1.1.
yrs <- c(2004:2015)
yrs
#making the plot
ggplot(mydata) + geom_line(aes(x=yrs, y=tr_group$employment_rate))
#making the plot
ggplot(mydata) + geom_line(aes(x=yrs, y=mean(tr_group$employment_rate))
#making the plot
ggplot(mydata) + geom_line(aes(x=yrs, y=mean(tr_group$employment_rate))
#making the plot
ggplot(mydata) + geom_line(aes(x=yrs, y=mean(tr_group$employment_rate)))
#making the plot
ggplot(mydata) + geom_line(aes(x=yrs, y=mean(tr_group$employment_rate)))
#making the plot
ggplot(tr_group) + geom_line(aes(x=yrs, y=mean(tr_group$employment_rate)))
#making the plot
ggplot() + geom_line(aes(x=yrs, y=mean(tr_group$employment_rate)))
tr_group %>%
group_by(year) %>%
summarise_at(employment_rate, funs(mean(., na.rm=TRUE)))
tr_group %>%
group_by(year) %>%
summarise_at(vars(employment_rate), funs(mean(., na.rm=TRUE)))
tr_group %>%
group_by(year) %>%
summarise_at(vars(employment_rate), list(mean(., na.rm=TRUE)))
means <- tr_group %>%
group_by(year) %>%
summarise_at(vars(employment_rate), list(mean(., na.rm=TRUE)))
means <- tr_group %>%
group_by(year) %>%
summarise_at(vars(employment_rate), list(~mean(., na.rm=TRUE)))
#making the plot
ggplot() + geom_line(aes(x=yrs, y=means))
#1.1.
min(tr_group$year)
#1.1.
max(tr_group$year)
length(yrs)
length(means)
nrow(means)
#making the plot
ggplot() + geom_line(aes(x=yrs, y=t(means))
#making the plot
ggplot() + geom_line(aes(x=yrs, y=t(means)))
#making the plot
ggplot() + geom_line(aes(x=yrs, y=t(means)))
means
#making the plot
ggplot() + geom_line(aes(x=yrs, y=means$employment_rate))
means_tr <- tr_group %>%
group_by(year) %>%
summarise_at(vars(employment_rate), list(~mean(., na.rm=TRUE)))
mydata$region
ctr_group <- filter(mydata, region %>%  !tr_target)
ctr_group <- filter(mydata, region %!>%  tr_target)
ctr_group <- !filter(mydata, region %!>%  tr_target)
ctr_group <- !filter(mydata, region %>%  tr_target)
ctr_group <- !filter(mydata, region %in%  tr_target)
ctr_group <- filter(mydata, region %!in%  tr_target)
ctr_group <- filter(mydata, !region %in%  tr_target)
ctr_group
ctr[ctr_group$region=="TR62",]
ctr_group[ctr_group$region=="TR62",]
means_ctr <- ctr_group %>%
group_by(year) %>%
summarise_at(vars(employment_rate), list(~mean(., na.rm=TRUE)))
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate))+geom_line(x = yrs, y = ctr_means)
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate))+geom_line(x = yrs, y = means_ctr)
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate))+
geom_line(x = yrs, y = means_ctr) +
scale_y_continuous(limits = c(0,0.8)) +
scale_x_continuous (limits = c(2003,2015))+
xlab("Year")+
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate))+
geom_line(x = yrs, y = means_ctr) +
scale_y_continuous(limits = c(0.2,0.6)) +
scale_x_continuous (limits = c(2003,2015))+
xlab("Year")+
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr)) +
scale_y_continuous(limits = c(0.2,0.6)) +
scale_x_continuous (limits = c(2003,2015))+
xlab("Year")+
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr)) +
scale_y_continuous(limits = c(0.2,0.6)) +
scale_x_continuous (limits = c(2003,2015))+
xlab("Year")+
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate)) +
scale_y_continuous(limits = c(0.2,0.6)) +
scale_x_continuous (limits = c(2003,2015))+
xlab("Year")+
ylab("Employment rate")
means_tr
means
means_ctr
means_tr
means_ctr
means_tr
means_ctr
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate[1:12])) +
scale_y_continuous(limits = c(0.2,0.6)) +
scale_x_continuous (limits = c(2003,2015)) +
xlab("Year") +
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate[1:12])) +
scale_y_continuous(limits = c(0.3,0.6)) +
scale_x_continuous (limits = c(2003,2015)) +
geom_vline(xintercept = 2012) +
xlab("Year") +
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate[1:12])) +
geom_point() +
scale_y_continuous(limits = c(0.3,0.6)) +
scale_x_continuous (limits = c(2003,2015)) +
geom_vline(xintercept = 2012, color = "red") +
xlab("Year") +
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate[1:12])) +
geom_point() +
scale_y_continuous(limits = c(0.3,0.6)) +
scale_x_continuous (limits = c(2003,2015)) +
geom_vline(xintercept = 2012, color = "red", linetype = "dotted") +
xlab("Year") +
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate[1:12])) +
geom_point() +
scale_y_continuous(limits = c(0.3,0.6)) +
scale_x_continuous (limits = c(2003,2015)) +
geom_vline(xintercept = 2011, color = "red", linetype = "dotted") +
xlab("Year") +
ylab("Employment rate")
#making the plot
ggplot() + geom_line(aes(x = yrs, y = means_tr$employment_rate)) +
geom_line(aes(x = yrs, y = means_ctr$employment_rate[1:12])) +
geom_point() +
scale_y_continuous(limits = c(0.3,0.5)) +
scale_x_continuous (limits = c(2003,2015)) +
geom_vline(xintercept = 2011, color = "red", linetype = "dotted") +
xlab("Year") +
ylab("Employment rate")
dummies_tr <- as.numeric(mydata$year>=2012)
dummies_tr
dummies_year <- as.numeric(mydata$year>=2012)
dummies_treatment <- as.numeric(mydata$region == "TR62" | mydata$region == "TR63" | mydata$region == "TRC1" | mydata$region == "TRC2" |  mydata$region == "TRC3" )
##combine
mydata2 <- cbind(mydata, dummies_year, dummies_treatment)
#regression
lm(data = mydata2, formula = employment ~ dummies_year + dummies_treatment + dummies_year*dummies_treatment)
mydata2
#regression
lm(data = mydata2, formula = employment_rate ~ dummies_year + dummies_treatment + dummies_year*dummies_treatment)
#regression
model1 <- lm(data = mydata2, formula = employment_rate ~ dummies_year + dummies_treatment + dummies_year*dummies_treatment)
summary(model1)
model2 <- lm(data = mydata2, formula = wage ~ dummies_year + dummies_treatment + dummies_year*dummies_treatment)
mydata2
#regression
model1 <- lm(data = mydata2, formula = employment_rate ~ dummies_year + dummies_treatment + dummies_year*dummies_treatment+gdp_pc)
summary(model1)
########################
#2. Open data and provide summary statistics similar to those in table 1.
head(data)
########################
#2. Open data and provide summary statistics similar to those in table 1.
class(data)
#load data (in same folder)
data <- read.csv2("MonthlyPanel.csv", header = T)
#setting working directory to the right folder wrt github
goalwd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(goalwd)
#load data (in same folder)
data <- read.csv2("MonthlyPanel.csv", header = T)
########################
#2. Open data and provide summary statistics similar to those in table 1.
class(data)
########################
#2. Open data and provide summary statistics similar to those in table 1.
head(data)
########################
#2. Open data and provide summary statistics similar to those in table 1.
View(data)
